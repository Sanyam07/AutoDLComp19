{
  # Codalab submission
  include: {
    packages: {
      hjson: null
      apex: [ # This implies to use it when training druing the submission
        apex
        apex-0.1-py3.5.egg-info
        amp_C.cpython-35m-x86_64-linux-gnu.so
        apex_C.cpython-35m-x86_64-linux-gnu.so
        fused_adam_cuda.cpython-35m-x86_64-linux-gnu.so
        fused_layer_norm_cuda.cpython-35m-x86_64-linux-gnu.so
        syncbn.cpython-35m-x86_64-linux-gnu.so
      ]
    },
    pretrained_weights: [
      Averagenet_RGB_Kinetics_128.pth.tar
    ]
  },

  # Automatic mixed precision ops
  use_amp: false,
  amp_args: { # See https://nvidia.github.io/apex/amp.html#opt-levels
    opt_level: "O2" # O0 is normal learning and apex does nothing
    keep_batchnorm_fp32: true,
    loss_scale: "dynamic"
  },

  # General
  log_level: 'DEBUG',
  earlystop: 120, # Stop after 300 seconds
  benchmark_transformations: false,
  benchmark_time_till_first_prediction: false,
  

  # CUDNN
  cudnn_benchmark: false,
  cudnn_deterministic: true

  # SEEDS
  tf_seed: 42,
  np_random_seed: 42,
  torch_manual_seed: 42,
  torch_cuda_manual_seed_all: 42,


  # Dataset/DataLoader
  dataset_split_ratio: [1, 0],
  dataloader_args: {
    train: {
      batch_size: 16,
      shuffle: true,
      num_workers: 0,
      pin_memory: true, # faster transfer of data to gpu if true
      drop_last: false,
    }
    test: {
      batch_size: 128,
      shuffle: false,
      num_workers: 0,
      pin_memory: true, # faster transfer of data to gpu if true
      drop_last: false,
    }
  },


  # Model and Optimizer selection algorithms
  model_selector: 'master_selector',
  model_selector_args: {
    # dummy_model_selector: {
    #   resize: true
    # },
    master_selector: {
      modelargs: {
        # Philipp: I assume these should depend on the selected model
        # so for now we expose them here to hardcode them
        optimizer: 'SGD',
        modality: 'RGB',
        initial_dropout: 0,
        lr: 0.001,
        lr_step: 10,
        lr_gamma: 0.01,
      }
    },
  },

  transformations_selector: 'aug_net',
  transformations_selector_args: {
    # dummy_transformations_selector: {
    #   resize: true
    # },
    aug_net: {
      use_gpu_resize: false,
    }
  },

  trainer: 'policy_trainer',
  trainer_args: {  # If the chosen trainer is a class the args
                   # will be passed as init arguments
    policy_trainer: {
      bn_prod_limit: 256, # limit of batch_size * num_segments
      num_segments_step: 4000,
      t_diff: 0.02,
      dropout_diff: 1e-3,
    },
  },

  tester: 'default_tester',
  tester_args: {  # If the chosen trainer is a class the args
                   # will be passed as init arguments
    default_tester: {
      bn_prod_limit: 128, # limit of batch_size * num_segments
      num_segments_test: null,  # if not set don't change it for testing
    },
  },
}
